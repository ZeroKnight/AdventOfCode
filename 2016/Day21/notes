To implement the reverse of the `rotate based on...` instruction, we'll observe
this this I/O table of the instruction:

pos     shift   newpos
----------------------
0       1       1
1       2       3
2       3       5
3       4       7
4       6       2
5       7       4
6       8       6
7       9       0

There is a pattern, the `newpos` increases by 2, with odd numbers if pos < 4,
and even numbers if pos >= 4. To find `pos` given `newpos`, we can get the
`shift` by adding (1 if odd, 10 if even) to `newpos` and dividing by 2. If
`newpos` is 0, set it to 8. Finally, rotate left `shift` times.
